{"version":3,"sources":["logo.svg","Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","aria-role","aria-label","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","handleClick","bind","length","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","push","id","uuid","setState","st","setItem","stringify","alert","delta","sort","a","b","src","alt","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93850ddb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport './Joke.css'\r\n\r\nclass Joke extends Component {\r\n\r\n    getColor(){\r\n        if(this.props.votes >= 15){\r\n            return \"#4CAF50\"\r\n        } else if (this.props.votes >= 12) {\r\n            return \"#8BC34A\"\r\n        }\r\n        else if (this.props.votes >= 9) {\r\n            return \"#CFFC39\"\r\n        }\r\n        else if (this.props.votes >= 6) {\r\n            return \"#FFEB3B\"\r\n        }\r\n        else if (this.props.votes >= 3) {\r\n            return \"#FFC107\"\r\n        }\r\n        else if (this.props.votes >= 0) {\r\n            return \"#FF9800\"\r\n        } else {\r\n            return \"#F44336\"\r\n        }\r\n    }\r\n\r\n    getEmoji(){\r\n        if(this.props.votes >= 15){\r\n            return \"em em-rolling_on_the_floor_laughing\"\r\n        } else if (this.props.votes >= 12) {\r\n            return \"em em-laughing\"\r\n        }\r\n        else if (this.props.votes >= 9) {\r\n            return \"em em-smiley\"\r\n        }\r\n        else if (this.props.votes >= 6) {\r\n            return \"em em-slightly_smiling_face\"\r\n        }\r\n        else if (this.props.votes >= 3) {\r\n            return \"em em-neutral_face\"\r\n        }\r\n        else if (this.props.votes >= 0) {\r\n            return \"em em-confused\"\r\n        } else {\r\n            return \"em em-angry\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Joke\">\r\n                <div className=\"Joke-buttons\">\r\n                    <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\r\n                    <span className=\"Joke-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\r\n                    <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\r\n                </div>\r\n                <div className=\"Joke-text\">\r\n                    {this.props.text}\r\n                </div>\r\n                <div className=\"Joke-smiley\">\r\n                    <i className={this.getEmoji()} aria-role=\"presentation\" aria-label=\"ROLLING ON THE FLOOR LAUGHING\"></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Joke;\r\n","import React, { Component } from 'react'\r\nimport './JokeList.css'\r\nimport Joke from './Joke'\r\nimport axios from 'axios'\r\nimport uuid from 'uuid/v4'\r\n\r\nexport class JokeList extends Component {\r\n    static defaultProps = {\r\n        numJokesToGet: 10\r\n    };\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"), \r\n            loading: false\r\n        };\r\n        this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        if(this.state.jokes.length === 0) this.getJokes();\r\n    }\r\n    async getJokes(){\r\n        try{\r\n        let jokes = [];\r\n        while(jokes.length < this.props.numJokesToGet){\r\n            let res = await axios.get(\"https://icanhazdadjoke.com/\", { \r\n            headers: { Accept: \"application/json\" }\r\n        });\r\n        let newJoke = res.data.joke;\r\n        if(!this.seenJokes.has(newJoke)){\r\n            jokes.push({id: uuid(), text: newJoke, votes: 0});\r\n        } else { \r\n            \r\n        }\r\n        } \r\n        this.setState(st => ({\r\n            loading: false,\r\n            jokes: [...st.jokes, ...jokes]\r\n        }),\r\n        () => \r\n            window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n        );\r\n        }\r\n        catch(e){\r\n            alert(e);\r\n            this.setState({loading: false});\r\n        }\r\n    }\r\n    handleVote(id, delta){\r\n        this.setState(st=> ({\r\n            jokes: st.jokes.map(j => \r\n                j.id === id ? {...j, votes: j.votes + delta} : j\r\n            )\r\n        }),\r\n        () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n        );\r\n    }\r\n    handleClick() {\r\n        this.setState({loading: true}, this.getJokes);\r\n    }\r\n    render() {\r\n        if(this.state.loading){\r\n            return (\r\n                <div className=\"JokeList-spinner\">\r\n                    <i className=\"far fa-8x fa-laugh fa-spin\"/>\r\n                    <h1 className=\"JokeList-title\">Loading</h1>\r\n                </div>\r\n            )\r\n        }\r\n        let jokes = this.state.jokes.sort((a,b) => b.votes -a.votes)\r\n        return (\r\n            <div className=\"JokeList\">\r\n            <div className=\"JokeList-sidebar\">\r\n                <h1 className=\"JokeList-title\">\r\n                    <span>Dad</span> Jokes\r\n                </h1>\r\n                <img\r\n                className=\"JokeList-sidebarImg\"\r\n                src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" \r\n                alt=\"Smily Icon\"/>\r\n                <button className=\"JokeList-getmore\" onClick={this.handleClick}>New Jokes</button>\r\n            </div>\r\n                \r\n                <div className=\"JokeList-jokes\">\r\n                    {jokes.map(j => (\r\n                        <Joke \r\n                            key={j.id} \r\n                            votes={j.votes} \r\n                            text={j.text}\r\n                            upvote={() => this.handleVote(j.id, 1)}\r\n                            downvote={() => this.handleVote(j.id, -1)}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default JokeList\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport JokeList from './JokeList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}